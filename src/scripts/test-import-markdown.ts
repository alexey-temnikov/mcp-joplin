import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import JoplinAPIClient from '../lib/joplin-api-client.js';
import { ImportMarkdown } from '../lib/tools/index.js';
import { ImportMarkdownInput } from '../types/index.js';

// Get directory name
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config();

// Check for required environment variables
const requiredEnvVars = ['JOPLIN_PORT', 'JOPLIN_TOKEN'];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`Error: ${envVar} environment variable is required`);
    process.exit(1);
  }
}

// Create the Joplin API client
const apiClient = new JoplinAPIClient({
  port: parseInt(process.env.JOPLIN_PORT || '41184', 10),
  token: process.env.JOPLIN_TOKEN as string
});

// Create the tool
const importMarkdown = new ImportMarkdown(apiClient);

// Test the import markdown functionality
async function testImportMarkdown(): Promise<void> {
  try {
    // Check if Joplin is available
    const available = await apiClient.serviceAvailable();
    if (!available) {
      console.error('Error: Joplin service is not available');
      process.exit(1);
    }
    
    // Get file path from command line arguments or create a test file
    let filePath = process.argv[2];
    let tempFilePath: string | null = null;
    
    if (!filePath) {
      console.log('No file path provided. Creating a temporary markdown file...');
      
      // Create a temporary directory if it doesn't exist
      const tempDir = path.join(__dirname, '..', '..', 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // Create a temporary markdown file
      tempFilePath = path.join(tempDir, `test-import-${Date.now()}.md`);
      const content = `# Test Markdown Import\n\nThis is a test markdown file created at ${new Date().toISOString()}.\n\n## Features\n\n- Automatic import\n- Title extraction\n- Content preservation\n\n> This file was automatically generated by the test script.`;
      
      fs.writeFileSync(tempFilePath, content);
      filePath = tempFilePath;
      
      console.log(`Created temporary file at: ${filePath}`);
    }
    
    // Import the markdown file
    console.log(`\nImporting markdown file: "${filePath}"`);
    
    const importParams: ImportMarkdownInput = {
      file_path: filePath
    };
    
    const result = await importMarkdown.call(importParams);
    console.log(result);
    
    // Clean up temporary file if created
    if (tempFilePath && fs.existsSync(tempFilePath)) {
      console.log(`\nCleaning up temporary file: ${tempFilePath}`);
      fs.unlinkSync(tempFilePath);
    }
  } catch (error) {
    console.error('Error testing import markdown:', error);
  }
}

testImportMarkdown();
